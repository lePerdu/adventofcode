import enum
import itertools
import math
import sys
import typing

from dataclasses import dataclass

# Bitmap of spaces filled
Row = int
Rows = tuple[Row, ...]


def collides(a: Row, b: Row) -> bool:
    return (a & b) != 0


class Shape:
    """A list of rows, first row being the lowest"""

    def __init__(self, *rows: Row):
        self.rows = rows
        # Cache this since it would be accessed often
        self.__width = max(r.bit_length() for r in self.rows)

    @property
    def width(self) -> int:
        return self.__width

    @property
    def height(self) -> int:
        return len(self.rows)


@dataclass(frozen=True)
class Rock:
    shape: Shape
    row: int  # row from the bottom
    col: int  # column from the left

    def shift(self, shift: int) -> 'Rock':
        """Shift by shift units to the right"""
        return Rock(self.shape, row=self.row, col=self.col + shift)

    def drop(self) -> 'Rock':
        return Rock(self.shape, row=self.row-1, col=self.col)

    def rows(self) -> Rows:
        return tuple(
            row << self.col
            for row in self.shape.rows
        )


ROCK_SHAPES = [
    Shape(
        0b1111,
    ),
    Shape(
        0b010,
        0b111,
        0b010,
    ),
    Shape(
        0b111,
        0b100,
        0b100,
    ),
    Shape(
        0b1,
        0b1,
        0b1,
        0b1,
    ),
    Shape(
        0b11,
        0b11,
    ),
]


class Board:
    # Rows go from bottom of the board to the top
    rows: list[Row]

    def __init__(self, width: int):
        self.__width = width
        self.rows = []

    @property
    def width(self) -> int:
        return self.__width

    @property
    def height(self) -> int:
        return len(self.rows)

    def __getitem__(self, row: int) -> Row:
        if 0 <= row < len(self.rows):
            return self.rows[row]
        else:
            # Empty row
            return 0

    def __setitem__(self, row: int, data: Row):
        assert row >= 0, 'Cannot set at negative row'
        # Ensure enough space
        while len(self.rows) <= row:
            self.rows.append(0)

        self.rows[row] = data

    def in_bounds(self, rock: Rock) -> bool:
        return (
            rock.row >= 0 and
            0 <= rock.col and rock.col + rock.shape.width <= self.width
        )

    def collides(self, rock: Rock) -> bool:
        if not self.in_bounds(rock):
            return True

        for pos, rock_row in enumerate(rock.rows()):
            rock_row_height = pos + rock.row
            if collides(self[rock_row_height], rock_row):
                return True
        return False

    def add_rock(self, rock: Rock):
        for pos, rock_row in enumerate(rock.rows()):
            rock_row_height = pos + rock.row
            # Merge with existing row
            self[rock_row_height] |= rock_row

    def print(self):
        for r in range(len(self.rows)-1, -1, -1):
            row_str = f'{self.rows[r]:07b}'.replace('0', '.').replace('1', '#')
            print(f'|{"".join(reversed(row_str))}|')

        print(f'+{"-" * self.width}+')


class Move(enum.IntEnum):
    LEFT = -1
    RIGHT = 1


BOARD_WIDTH = 7
STARTING_HEIGHT = 3
STARTING_COLUMN = 2


class Game:
    def __init__(
        self,
        shapes: list[Shape],
        board: Board,
    ):
        self.shapes = shapes
        self.board = board
        self.move_count = 0
        self.rock_count = 0

    def _next_rock(self) -> Rock:
        shape = self.shapes[self.rock_count % len(self.shapes)]
        self.rock_count += 1
        return Rock(
            shape,
            row=self.board.height + STARTING_HEIGHT,
            col=STARTING_COLUMN
        )

    def drop_rock(self, move_source: typing.Iterator[Move]):
        rock = self._next_rock()

        while True:
            self.move_count += 1
            move = next(move_source)
            shifted = rock.shift(move)
            if not self.board.collides(shifted):
                rock = shifted

            dropped = rock.drop()
            if self.board.collides(dropped):
                break

            rock = dropped

        self.board.add_rock(rock)


def play_game(
    game: Game,
    moves: typing.Iterator[Move],
    rock_count: int,
):
    for _ in range(rock_count):
        game.drop_rock(moves)
        # print()
        # game.board.print()


def read_move(c: str) -> Move:
    match c:
        case '<': return Move.LEFT
        case '>': return Move.RIGHT
        case _: raise ValueError(f'Invalid move: `{c}`')



# INPUT = '>>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>'


def read_input() -> list[Move]:
    return [read_move(c) for c in INPUT.strip()]


def main():
    moves = read_input()

    game = Game(ROCK_SHAPES, Board(BOARD_WIDTH))
    move_seq = itertools.cycle(moves)
    play_game(
        game,
        moves=move_seq,
        rock_count=2022,
    )
    print(f'Final height: {game.board.height}')


if __name__ == '__main__':
    main()
